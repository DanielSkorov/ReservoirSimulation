#!/usr/bin/env python
# coding: utf-8

# <a id='pvt-td-gibbs_phase_rule'></a>
# # Правило фаз Гиббса
# Рассмотрим [состояние](TD-1-Basics.html#pvt-td-basics-state) некоторой системы. Для того чтобы его охарактеризовать, необходимо знать значения параметров системы. Учитывая изложенные выше уравнения, можно сказать, что одни параметры могут быть выражены через другие. Иными словами, одни параметры можно считать зависимыми от других. Допустим, рассматриваемая система состоит из нескольких фаз, компонентов. Какое количество независимых параметров необходимо знать для того, чтобы охарактеризовать состояние такой системы? На этот вопрос отвечает правило фаз Гиббса.
# 
# ```{prf:закон}
# :nonumber:
# Под степенями свободы понимается количество независимых интенсивных параметров, то есть таких параметров, которые могут независимо и произвольно меняться без влияния одного на другого. Тогда правило фаз Гиббса позволяет определить такое количество степеней свободы $F$:
# +++
# $$P + F = C + 2.$$
# +++
# ```
# 
# Здесь $P$ – количество фаз, $C$ – количество компонентов. Таким образом, если система состоит из одной фазы и одного компонента, то для описания ее состояния необходимо знать два независимых интенсинвых параметра (например, давление и температуру или температуру и молярный объем, поскольку отношение двух экстенсивных параметров является интенсивной величиной).
# 
# ```{admonition} NB
# Поскольку в правиле фаз Гиббса участвуют термодинамические параметры, то оно применимо только для равновесного состояния, в котором эти термодинамические параметры определены.
# ```
# 
# Увеличение количества компонентов в системе приводит к увеличению количества параметров (например, мольных долей компонентов, являющихся интенсивной величиной), которые необходимы для описания состояния. Увеличение количества фаз в системе приводит к снижению количества параметров, которые необходимы для описания состояния. Почему так? Рассмотрим систему, состоящую из одного компонента и двух фаз. Согласно правилу фаз Гиббса, для описания состояния такой системы необходимо знать один интенсивный параметр, например, давление или температуру. Поскольку система находится в равновесии, в том числе в диффузивном равновесии, то для такой системы выполняется следующее равенство: $\mu_{vapour} \left( P, T \right) = \mu_{liquid} \left( P, T \right) $. Иными словами, между интенсивными параметрами давлением и температурой устанавливается взаимосвяь, выраженная в виде данного равенства. Следовательно, зная один параметр, например, давление, другой параметр (температура) может быть однозначно определен по первому. В качестве примера можно рассмотреть двухфазную систему воды и пара. Параметры каждой фазы (давление, удельная энтальпия, удельный объем и т.д.) могут быть определены по одному лишь параметру (например, температуре). Однако количественное соотношение фаз по данному параметру не может быть найдено.

# Параметры воды (как фазы) в двухфазной области при температуре $200 \; \unicode{xB0} C$:

# In[1]:


from iapws import IAPWS97
water = IAPWS97(T=200+273.15, x=0)
water.P, water.h, water.s, water.v


# Параметры пара в двухфазной области при температуре $200 \; \unicode{xB0} C$:

# In[2]:


steam = IAPWS97(T=200+273.15, x=1)
steam.P, steam.h, steam.s, steam.v


# Параметры же двухфазной системы (не отдельно для каждой фазы, а в целом) в библиотеке *[iapws](https://iapws.readthedocs.io/en/latest/)* определяется средневзвешиванием на сухость пара. Например, энтальпия системы при сухости $0.6$ и температуре $200 \; \unicode{xB0} C$:

# In[3]:


mixture = IAPWS97(T=200+273.15, x=0.6)
mixture.h


# In[4]:


steam.h * 0.6 + water.h * (1 - 0.6)


# Чем больше фаз, тем больше можно записать взаимосвязей и тем меньше будет независимых интенсивных переменных. Например, для трех фаз одногокомпонентной системы количество степеней свободы равно нулю. Это говорит о том, что такая система однозначно определяется. Действительно, чистый компонент, например, вода может находиться в трех фазах одновременно только в одной точке – [тройной точке](https://en.wikipedia.org/wiki/Triple_point).
